{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"AmazonS3_linkedservice": {
			"type": "string"
		},
		"AzureBlobStorage1": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/1-adf-mi-s3-connection-noakv-nofunc-pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get temp tokens AWS S3 REST",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "get ADF MI bearer via AWS S3 REST error message",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://sts.amazonaws.com/?Action=AssumeRoleWithWebIdentity&RoleSessionName=app1&RoleArn=arn:aws:iam::',pipeline().parameters.aws_account_id,':role/', pipeline().parameters.aws_role_name,'&WebIdentityToken=', substring(activity('get ADF MI bearer via AWS S3 REST error message').output.Response, add(indexof(activity('get ADF MI bearer via AWS S3 REST error message').output.Response, 'Bearer '),length('Bearer ')), sub(sub(indexof(activity('get ADF MI bearer via AWS S3 REST error message').output.Response, '</ArgumentValue>'), indexof(activity('get ADF MI bearer via AWS S3 REST error message').output.Response,'Bearer ')), length('Bearer '))), '&Version=2011-06-15')",
								"type": "Expression"
							},
							"method": "GET"
						}
					},
					{
						"name": "copy data from S3 to ADLSgen2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get temp tokens AWS S3 REST",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AmazonS3ReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binary1",
								"type": "DatasetReference",
								"parameters": {
									"accesskeyid": {
										"value": "@substring(activity('get temp tokens AWS S3 REST').output.Response, add(indexof(activity('get temp tokens AWS S3 REST').output.Response, '<accesskeyid>'),length('<accesskeyid>')), \nsub(sub(indexof(activity('get temp tokens AWS S3 REST').output.Response, '</accesskeyid>'), indexof(activity('get temp tokens AWS S3 REST').output.Response,'<accesskeyid>')), length('<accesskeyid>'))\n)",
										"type": "Expression"
									},
									"secretaccesskey": {
										"value": "@substring(activity('get temp tokens AWS S3 REST').output.Response, add(indexof(activity('get temp tokens AWS S3 REST').output.Response, '<secretaccesskey>'),length('<secretaccesskey>')), \nsub(sub(indexof(activity('get temp tokens AWS S3 REST').output.Response, '</secretaccesskey>'), indexof(activity('get temp tokens AWS S3 REST').output.Response,'<secretaccesskey>')), length('<secretaccesskey>'))\n)",
										"type": "Expression"
									},
									"sessiontoken": {
										"value": "@substring(activity('get temp tokens AWS S3 REST').output.Response, add(indexof(activity('get temp tokens AWS S3 REST').output.Response, '<sessiontoken>'),length('<sessiontoken>')), \nsub(sub(indexof(activity('get temp tokens AWS S3 REST').output.Response, '</sessiontoken>'), indexof(activity('get temp tokens AWS S3 REST').output.Response,'<sessiontoken>')), length('<sessiontoken>'))\n)",
										"type": "Expression"
									},
									"s3name": {
										"value": "@pipeline().parameters.aws_s3_copy",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLSgen2",
								"type": "DatasetReference",
								"parameters": {
									"azure_storage": {
										"value": "@pipeline().parameters.azure_storage",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "get ADF MI bearer via AWS S3 REST error message",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://',pipeline().parameters.aws_s3_error, '.s3.eu-central-1.amazonaws.com/')",
								"type": "Expression"
							},
							"method": "GET",
							"authentication": {
								"type": "MSI",
								"resource": {
									"value": "@pipeline().parameters.azure_application_id_uri",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"aws_account_id": {
						"type": "string",
						"defaultValue": "123456789012"
					},
					"aws_s3_copy": {
						"type": "string",
						"defaultValue": "testrbaws"
					},
					"aws_s3_error": {
						"type": "string",
						"defaultValue": "testrbaws"
					},
					"azure_application_id_uri": {
						"type": "string",
						"defaultValue": "api://aws_azure_federate"
					},
					"aws_role_name": {
						"type": "string",
						"defaultValue": "AzureADWebIdentity3"
					},
					"azure_storage": {
						"type": "string",
						"defaultValue": "testawsadfrg8fd6"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-19T16:38:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binary1')]",
				"[concat(variables('factoryId'), '/datasets/ADLSgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AmazonS3_linkedservice')]",
					"type": "LinkedServiceReference",
					"parameters": {
						"accesskeyid": {
							"value": "@string(dataset().accesskeyid)",
							"type": "Expression"
						},
						"secretaccesskey": {
							"value": "@string(dataset().secretaccesskey)",
							"type": "Expression"
						},
						"sessiontoken": {
							"value": "@string(dataset().sessiontoken)",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"accesskeyid": {
						"type": "string"
					},
					"secretaccesskey": {
						"type": "string"
					},
					"sessiontoken": {
						"type": "string"
					},
					"s3name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AmazonS3Location",
						"bucketName": {
							"value": "@dataset().s3name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSgen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"azure_storage": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().azure_storage",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		}
	]
}