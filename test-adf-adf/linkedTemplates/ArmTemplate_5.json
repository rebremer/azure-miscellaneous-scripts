{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "test-adf-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Source_sink_same_container_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "testgdpstor2blob",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_silver_fact_sale",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     container: 'fabricdemo',",
						"     folderPath: 'silver/silver_fact_sale') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SaleKey as integer,",
						"          CityKey as integer,",
						"          CustomerKey as integer,",
						"          BillToCustomerKey as integer,",
						"          StockItemKey as integer,",
						"          InvoiceDateKey as timestamp,",
						"          DeliveryDateKey as timestamp,",
						"          SalespersonKey as integer,",
						"          WWIInvoiceID as integer,",
						"          Description as string,",
						"          Package as string,",
						"          Quantity as integer,",
						"          UnitPrice as decimal(38,6),",
						"          TaxRate as decimal(38,6),",
						"          TotalExcludingTax as decimal(38,6),",
						"          TaxAmount as decimal(38,6),",
						"          Profit as decimal(38,6),",
						"          TotalIncludingTax as decimal(38,6),",
						"          TotalDryItems as integer,",
						"          TotalChillerItems as integer,",
						"          LineageKey as integer,",
						"          Quarter as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cast oracle data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Oracle2016issue_vnet",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Oracle2016issue_vnet_sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "castdata",
							"description": "cast data"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AAAAA as string,",
						"          BBBBB as string,",
						"          CCCCC as timestamp,",
						"          DDDDD as string,",
						"          EEEEE as string,",
						"          FFFFF as string,",
						"          GGGGG as string,",
						"          HHHHH as string,",
						"          IIIII as string,",
						"          JJJJJ as timestamp,",
						"          KKKKK as string,",
						"          LLLLL as string,",
						"          MMMMM as string,",
						"          NNNNN as timestamp,",
						"          OOOO as string,",
						"          PPPP as string,",
						"          QQQQ as string,",
						"          RRRR as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 derive(KKKKK = \"1000000000.3333333333333333333333333333333\",",
						"     partitionBy('hash', 1)) ~> castdata",
						"castdata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AAAAA as string,",
						"          BBBBB as string,",
						"          CCCCC as timestamp,",
						"          DDDDD as string,",
						"          EEEEE as string,",
						"          FFFFF as string,",
						"          GGGGG as string,",
						"          HHHHH as string,",
						"          IIIII as string,",
						"          JJJJJ as timestamp,",
						"          KKKKK as double,",
						"          LLLLL as string,",
						"          MMMMM as string,",
						"          NNNNN as timestamp,",
						"          OOOO as string,",
						"          PPPP as string,",
						"          QQQQ as string,",
						"          RRRR as timestamp",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['parquetcasted_data.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GDPStor_privBlob_df')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "source dfs sink blob",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Source_sink_same_container_df",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime2",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-07T18:28:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Source_sink_same_container_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleSHIR2016issue_stor_ora_cast')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cast data",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cast oracle data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime2",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ADLSgen2 to Oracle",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "cast data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "rbr",
										"value": "100000000000000"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "parquetcasted_data.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AAAAA",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "AAAAA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BBBBB",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "BBBBB",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CCCCC",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "CCCCC",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DDDDD",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "DDDDD",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EEEEE",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EEEEE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FFFFF",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "FFFFF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "GGGGG",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "GGGGG",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "HHHHH",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "HHHHH",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "rbr",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "KKKKK",
											"type": "DOUBLE"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Oracle2016issue",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Oracle2016",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/cast oracle data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_sink_same_container_df')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Source_sink_same_container_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Source_sink_same_container_df",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-10T18:42:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Source_sink_same_container_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_nested_pipeline_root')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Test_nested_pipeline_worker1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Test_nested_pipeline_worker2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}