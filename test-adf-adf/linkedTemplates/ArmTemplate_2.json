{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "test-adf-adf"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://testgdpstor2.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://testgdpstor2.dfs.core.windows.net/"
		},
		"testgdpinformationfblob_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://testgdpinformationf.blob.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/testgdpinformationfblob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "@utcnow()",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('testgdpinformationfblob_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesdbdataflowsBloated')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "CSVMovieDataInput"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "DeltaMoviesDataInput"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink3"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink4"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink5"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink6"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink7"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink8"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "split2"
						},
						{
							"name": "split3"
						},
						{
							"name": "NewRating"
						},
						{
							"name": "CorrectSpelling"
						},
						{
							"name": "split4"
						},
						{
							"name": "NewRatingDelta"
						},
						{
							"name": "split5"
						},
						{
							"name": "split6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          {Rotton Tomato} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CSVMovieDataInput",
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          RottenTomato as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdb',",
						"     folderPath: 'delta') ~> DeltaMoviesDataInput",
						"CorrectSpelling split(toInteger(year) > 1970,",
						"     disjoint: false) ~> split1@(MoviesNewerThan1980, MoviesOlderThan1980)",
						"split1@MoviesOlderThan1980 split(toInteger(Rating)>10,",
						"     disjoint: false) ~> split2@(RatingEqualBetterThan10, RatingWorseThan10)",
						"split2@RatingWorseThan10 split(toInteger({RottenTomato})>10,",
						"     disjoint: false) ~> split3@(RottenTomatoEqualBetterThan10, RottenTomatoWorsethan10)",
						"split1@MoviesNewerThan1980 derive(Rating = toShort(1 + power(Rating/(Rating-0.1), 12))) ~> NewRating",
						"CSVMovieDataInput select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato = {Rotton Tomato}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CorrectSpelling",
						"DeltaMoviesDataInput split(toInteger(year) > 1970,",
						"     disjoint: false) ~> split4@(MoviesDeltaNewerThan1980, MoviesDeltaNewerOlderThan1980)",
						"split4@MoviesDeltaNewerThan1980 derive(Rating = toShort(1 + power(Rating/(Rating-0.1), 12))) ~> NewRatingDelta",
						"split4@MoviesDeltaNewerOlderThan1980 split(toInteger(Rating)>10,",
						"     disjoint: false) ~> split5@(RatingEqualBetterThan10Delta, RatingWorseThan10Delta)",
						"split5@RatingWorseThan10Delta split(toInteger(RottenTomato)>10,",
						"     disjoint: false) ~> split6@(RottenTomatoEqualBetterThan10Delta, RottenTomatoWorseThan10Delta)",
						"NewRating sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"split2@RatingEqualBetterThan10 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"split3@RottenTomatoEqualBetterThan10 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3",
						"split3@RottenTomatoWorsethan10 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdb',",
						"     folderPath: 'delta',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink4",
						"NewRatingDelta sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink5",
						"split5@RatingEqualBetterThan10Delta sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink6",
						"split6@RottenTomatoEqualBetterThan10Delta sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink7",
						"split6@RottenTomatoWorseThan10Delta sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink8"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesdbdataflowsOptimized')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "CSVMovieDataInput"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "DeltaMoviesDataInput"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink5"
						}
					],
					"transformations": [
						{
							"name": "FlowletRatingLogic1",
							"flowlet": {
								"referenceName": "NewRatingFlowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "FlowletRatingLogic2",
							"flowlet": {
								"referenceName": "NewRatingFlowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "CorrectSpelling"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          {Rotton Tomato} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CSVMovieDataInput",
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          RottenTomato as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdb',",
						"     folderPath: 'delta') ~> DeltaMoviesDataInput",
						"CorrectSpelling compose(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato",
						"     ),",
						"     composition: 'NewRatingFlowlet') ~> FlowletRatingLogic1@(output1)",
						"DeltaMoviesDataInput compose(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato",
						"     ),",
						"     composition: 'NewRatingFlowlet') ~> FlowletRatingLogic2@(output1)",
						"CSVMovieDataInput select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato = {Rotton Tomato}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CorrectSpelling",
						"FlowletRatingLogic1@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"FlowletRatingLogic2@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink5"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/xmltest')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {http://schemas.xmlsoap.org/soap/envelope/,Envelope} as ({http://schemas.xmlsoap.org/soap/envelope/,Body} as ({URI,BatchCKIToetsen} as ({URI,Application} as ({URI,BatchToetsHeader} as ({URI,XXXX1} as boolean, {URI,XXXX2} as boolean, {URI,XXXX3} as boolean, {URI,YYYY} as ({URI,Nummer} as short)), {URI,BatchToetsingen} as string[], {URI,XXXX} as boolean), {URI,Header} as ({URI,H1} as boolean, {URI,H2} as short, {URI,H3} as short, {URI,H4} as short, {URI,H6} as short, {URI,H7} as short, {URI,Referentie} as string))), {http://schemas.xmlsoap.org/soap/envelope/,Header} as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'xml',",
						"     fileSystem: 'xmltest',",
						"     fileName: 'testrb.xml',",
						"     validationMode: 'none',",
						"     namespaces: true) ~> source1",
						"source1 select(mapColumn(",
						"          Toetsingen = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{URI,BatchCKIToetsen}.{URI,Application}.{URI,BatchToetsingen}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 foldDown(unroll(Toetsingen, Toetsingen),",
						"     mapColumn(",
						"          Toetsingen",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['testrb.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Hein PoC Dataflows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "movies conversion",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "moviesdbdataflowsOptimized",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSVMovieDataInput": {},
									"DeltaMoviesDataInput": {},
									"sink1": {},
									"sink5": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-23T14:18:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/moviesdbdataflowsOptimized')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/XMLtest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "xmltest",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-03T19:06:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/xmltest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "url",
						"type": "varchar"
					},
					{
						"name": "title",
						"type": "varchar"
					},
					{
						"name": "text",
						"type": "varchar"
					},
					{
						"name": "title_vector",
						"type": "varchar"
					},
					{
						"name": "content_vector",
						"type": "varchar"
					},
					{
						"name": "vector_id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "silver_fact_nested_test"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raw/csv/full/fact_sale_1y_full",
						"fileSystem": "fabricdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "sqldb"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_q83')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SaleKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CityKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToCustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDateKey",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DeliveryDateKey",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "SalespersonKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WWIInvoiceID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Package",
						"type": "varchar"
					},
					{
						"name": "Quantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TotalExcludingTax",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TaxAmount",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "Profit",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TotalIncludingTax",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TotalDryItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalChillerItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LineageKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Quarter",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "silver_fact_sale_v2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle2016issue')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "oracle2016"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"foldername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "fabricdemo"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "SaleKey",
						"type": "INT64"
					},
					{
						"name": "CityKey",
						"type": "INT32"
					},
					{
						"name": "CustomerKey",
						"type": "INT32"
					},
					{
						"name": "BillToCustomerKey",
						"type": "INT32"
					},
					{
						"name": "StockItemKey",
						"type": "INT32"
					},
					{
						"name": "InvoiceDateKey",
						"type": "INT96"
					},
					{
						"name": "DeliveryDateKey",
						"type": "INT96"
					},
					{
						"name": "SalespersonKey",
						"type": "INT32"
					},
					{
						"name": "WWIInvoiceID",
						"type": "INT32"
					},
					{
						"name": "Description",
						"type": "UTF8"
					},
					{
						"name": "Package",
						"type": "UTF8"
					},
					{
						"name": "Quantity",
						"type": "INT32"
					},
					{
						"name": "UnitPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TaxRate",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "TotalExcludingTax",
						"type": "DECIMAL",
						"precision": 29,
						"scale": 2
					},
					{
						"name": "TaxAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "Profit",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalIncludingTax",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TotalDryItems",
						"type": "INT32"
					},
					{
						"name": "TotalChillerItems",
						"type": "INT32"
					},
					{
						"name": "LineageKey",
						"type": "INT32"
					},
					{
						"name": "Quarter",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Xml_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "xmltest"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_silver_fact_sale')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SaleKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CityKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToCustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDateKey",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DeliveryDateKey",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "SalespersonKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WWIInvoiceID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Package",
						"type": "varchar"
					},
					{
						"name": "Quantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TotalExcludingTax",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TaxAmount",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "Profit",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TotalIncludingTax",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TotalDryItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalChillerItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LineageKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Quarter",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "silver_fact_sale"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/testgdpinformationfblobdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "testgdpinformationfblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "privtest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/testgdpinformationfblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_hns_sink_blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "testgdpinformationfblob",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     par_container as string (\"testsourcesink\"),",
						"     par_source as string (\"source\"),",
						"     par_sink as string (\"sink\")",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: ($par_container),",
						"     folderPath: ($par_source)) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: ($par_container),",
						"     folderPath: ($par_sink),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/testgdpinformationfblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GDPStor_privBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "stor to blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "person//person.txt"
							},
							{
								"name": "Destination",
								"value": "dbo.person"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "firstname",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "firstname",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "lastname",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "lastname",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GDPstorDFS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "testgdpinformationfblobdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-07T18:28:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/testgdpinformationfblobdataset')]"
			]
		}
	]
}