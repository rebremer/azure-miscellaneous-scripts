{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "test-adf-adf"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://testgdpstor2.dfs.core.windows.net/"
		},
		"testgdpinformationfblob_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://testgdpinformationf.blob.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raw/csv/full/fact_sale_1y_full",
						"fileSystem": "fabricdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "sqldb"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OdbcTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OracleBuiltInODBC",
					"type": "LinkedServiceReference",
					"parameters": {
						"asdf": "adsf"
					}
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle2016')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle2016",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "TESTRBADMIN",
					"table": "TEST_PROD_ISSUE"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle2016issue')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "oracle2016"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OracleBuiltIn",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "TESTRBADMIN",
					"table": "BOOKS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable1ODBC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OracleBuiltInODBC",
					"type": "LinkedServiceReference",
					"parameters": {
						"asdf": "adsf"
					}
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {
					"tableName": "hjg"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"foldername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "fabricdemo"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "SaleKey",
						"type": "INT64"
					},
					{
						"name": "CityKey",
						"type": "INT32"
					},
					{
						"name": "CustomerKey",
						"type": "INT32"
					},
					{
						"name": "BillToCustomerKey",
						"type": "INT32"
					},
					{
						"name": "StockItemKey",
						"type": "INT32"
					},
					{
						"name": "InvoiceDateKey",
						"type": "INT96"
					},
					{
						"name": "DeliveryDateKey",
						"type": "INT96"
					},
					{
						"name": "SalespersonKey",
						"type": "INT32"
					},
					{
						"name": "WWIInvoiceID",
						"type": "INT32"
					},
					{
						"name": "Description",
						"type": "UTF8"
					},
					{
						"name": "Package",
						"type": "UTF8"
					},
					{
						"name": "Quantity",
						"type": "INT32"
					},
					{
						"name": "UnitPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TaxRate",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "TotalExcludingTax",
						"type": "DECIMAL",
						"precision": 29,
						"scale": 2
					},
					{
						"name": "TaxAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "Profit",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TotalIncludingTax",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "TotalDryItems",
						"type": "INT32"
					},
					{
						"name": "TotalChillerItems",
						"type": "INT32"
					},
					{
						"name": "LineageKey",
						"type": "INT32"
					},
					{
						"name": "Quarter",
						"type": "INT32"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvuami')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSgen2uami",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "person"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/testgdpinformationfblob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "@utcnow()",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('testgdpinformationfblob_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesdbdataflowsBloated')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "CSVMovieDataInput"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "DeltaMoviesDataInput"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink3"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink4"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink5"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink6"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink7"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink8"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "split2"
						},
						{
							"name": "split3"
						},
						{
							"name": "NewRating"
						},
						{
							"name": "CorrectSpelling"
						},
						{
							"name": "split4"
						},
						{
							"name": "NewRatingDelta"
						},
						{
							"name": "split5"
						},
						{
							"name": "split6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          {Rotton Tomato} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CSVMovieDataInput",
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          RottenTomato as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdb',",
						"     folderPath: 'delta') ~> DeltaMoviesDataInput",
						"CorrectSpelling split(toInteger(year) > 1970,",
						"     disjoint: false) ~> split1@(MoviesNewerThan1980, MoviesOlderThan1980)",
						"split1@MoviesOlderThan1980 split(toInteger(Rating)>10,",
						"     disjoint: false) ~> split2@(RatingEqualBetterThan10, RatingWorseThan10)",
						"split2@RatingWorseThan10 split(toInteger({RottenTomato})>10,",
						"     disjoint: false) ~> split3@(RottenTomatoEqualBetterThan10, RottenTomatoWorsethan10)",
						"split1@MoviesNewerThan1980 derive(Rating = toShort(1 + power(Rating/(Rating-0.1), 12))) ~> NewRating",
						"CSVMovieDataInput select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato = {Rotton Tomato}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CorrectSpelling",
						"DeltaMoviesDataInput split(toInteger(year) > 1970,",
						"     disjoint: false) ~> split4@(MoviesDeltaNewerThan1980, MoviesDeltaNewerOlderThan1980)",
						"split4@MoviesDeltaNewerThan1980 derive(Rating = toShort(1 + power(Rating/(Rating-0.1), 12))) ~> NewRatingDelta",
						"split4@MoviesDeltaNewerOlderThan1980 split(toInteger(Rating)>10,",
						"     disjoint: false) ~> split5@(RatingEqualBetterThan10Delta, RatingWorseThan10Delta)",
						"split5@RatingWorseThan10Delta split(toInteger(RottenTomato)>10,",
						"     disjoint: false) ~> split6@(RottenTomatoEqualBetterThan10Delta, RottenTomatoWorseThan10Delta)",
						"NewRating sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"split2@RatingEqualBetterThan10 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"split3@RottenTomatoEqualBetterThan10 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3",
						"split3@RottenTomatoWorsethan10 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdb',",
						"     folderPath: 'delta',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink4",
						"NewRatingDelta sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink5",
						"split5@RatingEqualBetterThan10Delta sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink6",
						"split6@RottenTomatoEqualBetterThan10Delta sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink7",
						"split6@RottenTomatoWorseThan10Delta sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink8"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesdbdataflowsOptimized')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "CSVMovieDataInput"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "DeltaMoviesDataInput"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink5"
						}
					],
					"transformations": [
						{
							"name": "FlowletRatingLogic1",
							"flowlet": {
								"referenceName": "NewRatingFlowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "FlowletRatingLogic2",
							"flowlet": {
								"referenceName": "NewRatingFlowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "CorrectSpelling"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          {Rotton Tomato} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CSVMovieDataInput",
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          RottenTomato as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdb',",
						"     folderPath: 'delta') ~> DeltaMoviesDataInput",
						"CorrectSpelling compose(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato",
						"     ),",
						"     composition: 'NewRatingFlowlet') ~> FlowletRatingLogic1@(output1)",
						"DeltaMoviesDataInput compose(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato",
						"     ),",
						"     composition: 'NewRatingFlowlet') ~> FlowletRatingLogic2@(output1)",
						"CSVMovieDataInput select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato = {Rotton Tomato}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CorrectSpelling",
						"FlowletRatingLogic1@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"FlowletRatingLogic2@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'moviesdbaggregated',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink5"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/xmltest')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "GDPstorageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {http://schemas.xmlsoap.org/soap/envelope/,Envelope} as ({http://schemas.xmlsoap.org/soap/envelope/,Body} as ({URI,BatchCKIToetsen} as ({URI,Application} as ({URI,BatchToetsHeader} as ({URI,XXXX1} as boolean, {URI,XXXX2} as boolean, {URI,XXXX3} as boolean, {URI,YYYY} as ({URI,Nummer} as short)), {URI,BatchToetsingen} as string[], {URI,XXXX} as boolean), {URI,Header} as ({URI,H1} as boolean, {URI,H2} as short, {URI,H3} as short, {URI,H4} as short, {URI,H6} as short, {URI,H7} as short, {URI,Referentie} as string))), {http://schemas.xmlsoap.org/soap/envelope/,Header} as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'xml',",
						"     fileSystem: 'xmltest',",
						"     fileName: 'testrb.xml',",
						"     validationMode: 'none',",
						"     namespaces: true) ~> source1",
						"source1 select(mapColumn(",
						"          Toetsingen = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{URI,BatchCKIToetsen}.{URI,Application}.{URI,BatchToetsingen}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 foldDown(unroll(Toetsingen, Toetsingen),",
						"     mapColumn(",
						"          Toetsingen",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['testrb.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parallel testing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('iterator'),99)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "parallel testing",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "parallel_test_source",
											"type": "DatasetReference",
											"parameters": {
												"number": {
													"value": "@variables('iterator')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "test_parallel_target",
											"type": "DatasetReference",
											"parameters": {
												"number": "78"
											}
										}
									]
								},
								{
									"name": "set dummy",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "parallel testing",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "dummy",
										"value": {
											"value": "@variables('iterator')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "set dummy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "iterator",
										"value": {
											"value": "@add(variables('dummy'),1)",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"dummy": {
						"type": "Integer",
						"defaultValue": 0
					},
					"iterator": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parallel testing_for_each')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Parallel copy",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('item_array')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "parallel_test_source",
											"type": "DatasetReference",
											"parameters": {
												"number": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "backupstorbinary",
											"type": "DatasetReference",
											"parameters": {
												"number": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"dummy": {
						"type": "Integer",
						"defaultValue": 0
					},
					"iterator": {
						"type": "Integer",
						"defaultValue": 0
					},
					"item_array": {
						"type": "Array",
						"defaultValue": [
							0,
							1,
							2,
							3,
							4,
							5,
							6,
							7,
							8,
							9,
							10,
							11,
							12,
							13,
							14,
							15,
							16,
							17,
							18,
							19,
							20,
							21,
							22,
							23,
							24,
							25,
							26,
							27,
							28,
							29,
							30,
							31,
							32,
							33,
							34,
							35,
							36,
							37,
							38,
							39,
							40,
							41,
							42,
							43,
							44,
							45,
							46,
							47,
							48,
							49,
							50,
							51,
							52,
							53,
							54,
							55,
							56,
							57,
							58,
							59,
							60,
							61,
							62,
							63,
							64,
							65,
							66,
							67,
							68,
							69,
							70,
							71,
							72,
							73,
							74,
							75,
							76,
							77,
							78,
							79,
							80,
							81,
							82,
							83,
							84,
							85,
							86,
							87,
							88,
							89,
							90,
							91,
							92,
							93,
							94,
							95,
							96,
							97,
							98,
							99
						]
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Hein PoC Dataflows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "movies conversion",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "moviesdbdataflowsOptimized",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSVMovieDataInput": {},
									"DeltaMoviesDataInput": {},
									"sink1": {},
									"sink5": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-23T14:18:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/moviesdbdataflowsOptimized')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleSHIR2016issue_ora_stor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Oracle to ADLSgen2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AAAAA",
											"type": "String"
										},
										"sink": {
											"name": "AAAAA",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "BBBBB",
											"type": "String"
										},
										"sink": {
											"name": "BBBBB",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CCCCC",
											"type": "DateTime"
										},
										"sink": {
											"name": "CCCCC",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "DDDDD",
											"type": "String"
										},
										"sink": {
											"name": "DDDDD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "EEEEE",
											"type": "String"
										},
										"sink": {
											"name": "EEEEE",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "FFFFF",
											"type": "String"
										},
										"sink": {
											"name": "FFFFF",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GGGGG",
											"type": "String"
										},
										"sink": {
											"name": "GGGGG",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "HHHHH",
											"type": "String"
										},
										"sink": {
											"name": "HHHHH",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "IIIII",
											"type": "String"
										},
										"sink": {
											"name": "IIIII",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "JJJJJ",
											"type": "DateTime"
										},
										"sink": {
											"name": "JJJJJ",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "KKKKK",
											"type": "String"
										},
										"sink": {
											"name": "KKKKK",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "LLLLL",
											"type": "String"
										},
										"sink": {
											"name": "LLLLL",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "MMMMM",
											"type": "String"
										},
										"sink": {
											"name": "MMMMM",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "NNNNN",
											"type": "DateTime"
										},
										"sink": {
											"name": "NNNNN",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "OOOO",
											"type": "String"
										},
										"sink": {
											"name": "OOOO",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PPPP",
											"type": "String"
										},
										"sink": {
											"name": "PPPP",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "QQQQ",
											"type": "String"
										},
										"sink": {
											"name": "QQQQ",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "RRRR",
											"type": "DateTime"
										},
										"sink": {
											"name": "RRRR",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Oracle2016",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Oracle2016issue",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle2016')]",
				"[concat(variables('factoryId'), '/datasets/Oracle2016issue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleSHIR2016issue_stor_ora')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ADLSgen2 to Oracle",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "KKKKKv2",
										"value": "999999999999999.99999999999999 "
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "TESTRBADMIN.TEST_PROD_ISSUE_v2 (2).parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AAAAA",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "AAAAA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BBBBB",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "BBBBB",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CCCCC",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "CCCCC",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DDDDD",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "DDDDD",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EEEEE",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "EEEEE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FFFFF",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "FFFFF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "GGGGG",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "GGGGG",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "HHHHH",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "HHHHH",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "KKKKKv2",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "KKKKK",
											"type": "DOUBLE"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Oracle2016issue",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Oracle2016",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle2016issue')]",
				"[concat(variables('factoryId'), '/datasets/Oracle2016')]"
			]
		}
	]
}